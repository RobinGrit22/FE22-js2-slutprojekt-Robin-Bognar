{"mappings":"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","sources":["src/modules/profile.ts"],"sourcesContent":["import { getDatabase, ref, onValue, get } from 'firebase/database';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { firebaseConfig } from './firebase'; // Update the import path if needed\r\nimport {  handleLike } from './mainpage';\r\nimport { logOutAccount, deleteAccount } from './firebase';\r\nimport { fetchUsers } from './firebase';\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\nconst db = getDatabase(firebaseApp);\r\n\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst userId = urlParams.get('userId');\r\n\r\nasync function getUsername(userId: string): Promise<string> {\r\n  const userSnapshot = await get(ref(db, `users/${userId}`));\r\n  return userSnapshot.val().username;\r\n}\r\n\r\nif (userId) {\r\n  const db = getDatabase();\r\n  const userRef = ref(db, `users/${userId}`);\r\n\r\n  onValue(userRef, (snapshot) => {\r\n    const userData = snapshot.val();\r\n    console.log('userData:', userData);\r\n    const userNameDisplay = document.getElementById('username');\r\n    const userImageDisplay = document.getElementById('profileImage') as HTMLImageElement;\r\n\r\n    userNameDisplay && (userNameDisplay.innerText = userData.username);\r\n\r\n    if (userImageDisplay) {\r\n    userImageDisplay.src = userData.image\r\n    }\r\n    displayTop10LikedPosts()\r\n  });\r\n\r\n  // visa användarens inlägg\r\n  const postsRef = ref(db, 'posts');\r\n  onValue(postsRef, async (snapshot) => {\r\n    const posts = snapshot.val();\r\n    const postContainer = document.getElementById('postsList');\r\n\r\n    if (posts && postContainer) {\r\n      postContainer.innerHTML = '';\r\n\r\n      \r\n      const userPosts = Object.entries(posts)\r\n        .filter(([_, post]) => (post as any).userId === userId)\r\n        .map(([id, post]) => ({ id, ...(post as any) }));\r\n\r\n      userPosts.sort((a, b) => new Date((b as any).createdAt).getTime() - new Date((a as any).createdAt).getTime());\r\n      console.log(userPosts)\r\n\r\n      for (const post of userPosts) {\r\n        const username = await getUsername((post as any).userId);\r\n\r\n        const postItem = document.createElement('div');\r\n        postItem.className = 'post-item';\r\n        postItem.innerHTML = `\r\n          <h5 class=\"postName\">${username}</h5>\r\n          <p class=\"postContent\">${(post as any).content}</p>\r\n          <p class=\"postTime\">${(post as any).createdAt}</p>\r\n        `;\r\n\r\n        postContainer.appendChild(postItem);\r\n      }\r\n    }\r\n  });\r\n\r\n} else {\r\n  console.log('No user ID provided');\r\n}\r\ninterface Post {\r\n  id: string,\r\n  userId: string;\r\n  content: string;\r\n  createdAt: string;\r\n  likes: number;\r\n}\r\nexport const displayTop10LikedPosts = async () => {\r\n  const db = getDatabase();\r\n  const postsRef = ref(db, 'posts');\r\n  const snapshot = await get(postsRef);\r\n  const posts = snapshot.val();\r\n\r\n  const postArray = Object.entries(posts).map(([id, post]) => ({ id, userId: (post as Post).userId, content: (post as Post).content, createdAt: (post as Post).createdAt, likes: (post as Post).likes }));\r\n \r\n  postArray.sort((a, b) => b.likes - a.likes);\r\n  const top10Posts = postArray.slice(0, 5);\r\n  \r\n  const top10PostsContainer = document.getElementById('top10LikedPosts');\r\n\r\n  if (top10PostsContainer) {\r\n    top10PostsContainer.innerHTML = '';\r\n\r\n    for (const post of top10Posts) {\r\n      const userSnapshot = await get(ref(db, `users/${post.userId}`));\r\n      const user = userSnapshot.val();\r\n      if(user) {\r\n        const postItem = document.createElement('div');\r\n        postItem.className = 'postLiked10';\r\n        postItem.innerHTML = `\r\n          <h5 class=\"postNameLiked\">${user.username}</h5>\r\n          <p class=\"postContentLiked\">${post.content}</p>\r\n          <p class=\"postLikesLiked\">Likes: ${post.likes}</p>\r\n        `;\r\n  \r\n        top10PostsContainer.appendChild(postItem);\r\n      }\r\n     \r\n    }\r\n  }\r\n};\r\n      //Visa users på höger section\r\n      fetchUsers().then((users) => {\r\n        console.log('users:', users);\r\n        console.log(Object.values(users))\r\n     \r\n      interface User {\r\n      username: string;\r\n       }\r\n       (Object.entries(users) as [string, User][]).forEach(([userId, user]) => {\r\n        const container = document.querySelector('.user-names');\r\n        const p = document.createElement('p');\r\n        p.setAttribute('data-user-id', userId);\r\n        container?.append(p);\r\n        p && (p.innerText = user.username);\r\n      \r\n        p.addEventListener('click', () => {\r\n          window.location.href = `./profile.html?userId=${userId}`;\r\n        });\r\n      });\r\n      });\r\n\r\n\r\n      //logga ut\r\nconst logOutBtn = document.querySelector('#loggOutBtn') as HTMLElement;\r\nlogOutBtn.addEventListener('click', () =>{\r\n   logOutAccount().then(() => {\r\n    location.assign('../index.html');\r\n  });\r\n})\r\n\r\n//radera konto\r\nconst deleteAccountBtn = document.querySelector('#deleteAccountBtn') as HTMLElement\r\ndeleteAccountBtn.addEventListener('click', () => {\r\n  deleteAccount().then(() => {\r\n    location.assign('../index.html');\r\n  });\r\n})"],"names":["$gdelx","parcelRequire","$c5272c87d5623534$var$firebaseApp","$fhN3L","initializeApp","$k8Jq9","firebaseConfig","$c5272c87d5623534$var$db","getDatabase","$c5272c87d5623534$var$userId","URLSearchParams","window","location","search","get","async","$c5272c87d5623534$var$getUsername","userId","ref","val","username","db","userRef","onValue","snapshot","userData","console","log","userNameDisplay","document","getElementById","userImageDisplay","innerText","src","image","$c5272c87d5623534$export$604dda215122b2e7","postsRef","posts","postContainer","innerHTML","userPosts","Object","entries","filter","_","post","map","id","sort","a","b","Date","createdAt","getTime","postItem","createElement","className","content","appendChild","postArray","likes","top10Posts","slice","top10PostsContainer","user","fetchUsers","then","users","values","forEach","container","querySelector","p","setAttribute","append","addEventListener","href","logOutAccount","assign","deleteAccount"],"version":3,"file":"profile.8fb7eca7.js.map"}